---
import { generateIndex } from "@/utils/generateIndex";

const { pathname } = Astro.url;
const allPages = await Astro.glob("@/pages/**/*.{md,mdx}");
const listItemsMenu = generateIndex(allPages, pathname, true);

function renderMenu(items) {
  return items
    .map(
      (item) => `
    <li class="${item.children ? "has-submenu" : ""}">
      <a href="${item.url}">${item.label}</a>
      ${
        item.children
          ? `
        <ul class="sidebar-submenu">
          ${renderMenu(item.children)}
        </ul>
      `
          : ""
      }
    </li>
  `
    )
    .join("");
}
---

<aside class="sidebar">
  <button id="sidebarToggle" class="toggle-btn">X</button>
  <nav>
    <ul id="sidebarMenu" class="sidebar-menu">
      <Fragment set:html={renderMenu(listItemsMenu)} />
    </ul>
  </nav>
</aside>

<style is:inline>
  aside {
    grid-area: sidebar;
    background-color: var(--accent-tertiary);
    color: var(--text-main);
    overflow-y: auto;
    width: 0;
    height: 100%;
    position: fixed;
    top: 0;
    left: 0;
    transition: all 0.3s ease;
    z-index: 20;
    display: flex;
    flex-direction: column;
  }

  .wrapper.sidebar-visible aside {
    width: 250px;
    padding: 1rem;
  }

  #sidebarToggle {
    align-self: flex-end;
    margin-bottom: 1rem;
  }

  .sidebar-menu {
    list-style-type: none;
    padding: 0;
    margin: 0;
  }

  .sidebar-menu li {
    margin-bottom: 0.5rem;
  }

  .sidebar-menu a {
    display: block;
    padding: 0.5rem;
    color: var(--text-main);
    text-decoration: none;
    transition:
      color 0.3s ease,
      background-color 0.3s ease;
  }

  .sidebar-menu a:hover {
    color: var(--accent-primary);
    background-color: rgba(0, 0, 0, 0.1);
  }

  .sidebar-submenu {
    padding-left: 1rem;
    display: none;
  }

  .sidebar-menu .has-submenu > a::after {
    content: "▼";
    font-size: 0.7em;
    margin-left: 0.5rem;
  }

  .sidebar-menu .has-submenu.active > a::after {
    content: "▲";
  }

  .sidebar-menu .has-submenu.active > .sidebar-submenu {
    display: block;
  }

  .sidebar-menu .has-submenu > a {
    font-weight: bold;
  }

  .sidebar-submenu a {
    padding-left: 1.5rem;
  }

  @media (min-width: 767px) {
    aside {
      position: relative;
      height: auto;
    }
  }
</style>

<script>
  function initializeSidebar() {
    const sidebarToggle = document.getElementById("sidebarToggle");
    const wrapper = document.querySelector(".wrapper");
    const submenuItems = document.querySelectorAll(".has-submenu > a");

    function toggleSidebar() {
      wrapper.classList.toggle("sidebar-visible");
      if (wrapper.classList.contains("sidebar-visible")) {
        document.querySelector("aside").style.width = "250px";
      } else {
        document.querySelector("aside").style.width = "0";
      }
    }

    function toggleSubmenu(event) {
      event.preventDefault();
      const parentLi = this.closest("li");
      parentLi.classList.toggle("active");
      const submenu = parentLi.querySelector(".sidebar-submenu");
      if (submenu) {
        submenu.style.display = parentLi.classList.contains("active")
          ? "block"
          : "none";
      }
    }

    sidebarToggle.addEventListener("click", toggleSidebar);
    submenuItems.forEach((item) =>
      item.addEventListener("click", toggleSubmenu)
    );
  }

  document.addEventListener("DOMContentLoaded", initializeSidebar);
</script>
